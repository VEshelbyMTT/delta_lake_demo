{
	"name": "m6_taxi_dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ADLS_trip_data1",
						"type": "DatasetReference"
					},
					"name": "GetDataADLS"
				},
				{
					"dataset": {
						"referenceName": "ADLS_trip_fare_1",
						"type": "DatasetReference"
					},
					"name": "GetFareADLS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ADLS_scratch_parquet_temp",
						"type": "DatasetReference"
					},
					"name": "storeInTable"
				}
			],
			"transformations": [
				{
					"name": "joinDataFare"
				},
				{
					"name": "dropDuplicateColumns",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "removeVendorIDcmt"
				}
			],
			"scriptLines": [
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          rate_code as integer '000',",
				"          store_and_fwd_flag as string,",
				"          pickup_datetime as string,",
				"          dropoff_datetime as string,",
				"          passenger_count as integer,",
				"          trip_time_in_secs as integer '000',",
				"          trip_distance as float '000.##',",
				"          pickup_longitude as string,",
				"          pickup_latitude as string,",
				"          dropoff_longitude as string,",
				"          dropoff_latitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> GetDataADLS",
				"source(output(",
				"          medallion as string,",
				"          { hack_license} as string,",
				"          { vendor_id} as string,",
				"          { pickup_datetime} as string,",
				"          { payment_type} as string,",
				"          { fare_amount} as float '000.##',",
				"          { surcharge} as float '000.##',",
				"          { mta_tax} as float '000.##',",
				"          { tip_amount} as float '000.##',",
				"          { tolls_amount} as float '000.##',",
				"          { total_amount} as float '000.##'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> GetFareADLS",
				"GetDataADLS, GetFareADLS join(GetDataADLS@medallion == GetFareADLS@medallion",
				"     && hack_license == { hack_license},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDataFare",
				"removeVendorIDcmt select(mapColumn(",
				"          medallion = GetDataADLS@medallion,",
				"          hack_license,",
				"          vendor_id,",
				"          store_and_fwd_flag,",
				"          pickup_datetime,",
				"          dropoff_datetime,",
				"          passenger_count,",
				"          trip_time_in_secs,",
				"          trip_distance,",
				"          pickup_longitude,",
				"          pickup_latitude,",
				"          dropoff_longitude,",
				"          dropoff_latitude,",
				"          payment_type = { payment_type},",
				"          fare_amount = { fare_amount},",
				"          surcharge = { surcharge},",
				"          mta_tax = { mta_tax},",
				"          tip_amount = { tip_amount},",
				"          tolls_amount = { tolls_amount},",
				"          total_amount = { total_amount}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> dropDuplicateColumns",
				"joinDataFare filter(vendor_id != 'CMT') ~> removeVendorIDcmt",
				"dropDuplicateColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          store_and_fwd_flag as string,",
				"          pickup_datetime as string,",
				"          dropoff_datetime as string,",
				"          passenger_count as integer,",
				"          trip_time_in_secs as integer,",
				"          trip_distance as float,",
				"          pickup_longitude as string,",
				"          pickup_latitude as string,",
				"          dropoff_longitude as string,",
				"          dropoff_latitude as string,",
				"          payment_type as string,",
				"          fare_amount as float,",
				"          surcharge as float,",
				"          mta_tax as float,",
				"          tip_amount as float,",
				"          tolls_amount as float,",
				"          total_amount as float",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     mapColumn(",
				"          medallion,",
				"          hack_license,",
				"          vendor_id,",
				"          store_and_fwd_flag,",
				"          pickup_datetime,",
				"          dropoff_datetime,",
				"          passenger_count,",
				"          trip_time_in_secs,",
				"          trip_distance,",
				"          pickup_longitude,",
				"          pickup_latitude,",
				"          dropoff_longitude,",
				"          dropoff_latitude,",
				"          payment_type,",
				"          fare_amount,",
				"          surcharge,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          total_amount",
				"     ),",
				"     store: 'synapse') ~> storeInTable"
			]
		}
	}
}