{
	"name": "Explore sample data with Spark",
	"properties": {
		"folder": {
			"name": "dp203_M4"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkyBoiThird",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "979ca121-79e2-4600-83d9-977d7268ed10"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"14d53b6f-7037-40ca-810e-02759cc5401f": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": "0",
										"2": "2018",
										"3": "3.0601483931145594",
										"4": "36088.33",
										"5": "skittles"
									},
									{
										"0": "3",
										"1": "0",
										"2": "2018",
										"3": "2.338755980861244",
										"4": "488.8",
										"5": "high-fives"
									},
									{
										"0": "4",
										"1": "0",
										"2": "2018",
										"3": "2.9901960784313726",
										"4": "305.0",
										"5": "castles"
									},
									{
										"0": "2",
										"1": "0",
										"2": "2018",
										"3": "2.6708601509733803",
										"4": "13445.109999999997",
										"5": "buttons"
									},
									{
										"0": "2",
										"1": "1",
										"2": "2018",
										"3": "2.5967607238312214",
										"4": "1185317.3999999992",
										"5": "buttons"
									},
									{
										"0": "3",
										"1": "1",
										"2": "2018",
										"3": "2.6161448834853087",
										"4": "25821.35",
										"5": "high-fives"
									},
									{
										"0": "4",
										"1": "1",
										"2": "2018",
										"3": "2.8004423380726697",
										"4": "7090.719999999999",
										"5": "castles"
									},
									{
										"0": "1",
										"1": "1",
										"2": "2018",
										"3": "3.1081526684823073",
										"4": "3406644.1100000055",
										"5": "skittles"
									},
									{
										"0": "3",
										"1": "2",
										"2": "2018",
										"3": "3.8662365591397845",
										"4": "5393.4",
										"5": "high-fives"
									},
									{
										"0": "4",
										"1": "2",
										"2": "2018",
										"3": "4.41010498687664",
										"4": "1680.25",
										"5": "castles"
									},
									{
										"0": "1",
										"1": "2",
										"2": "2018",
										"3": "3.3082696443951067",
										"4": "718301.4299999988",
										"5": "skittles"
									},
									{
										"0": "2",
										"1": "2",
										"2": "2018",
										"3": "2.9509425703794343",
										"4": "301365.0099999997",
										"5": "buttons"
									},
									{
										"0": "2",
										"1": "3",
										"2": "2018",
										"3": "2.947675513549332",
										"4": "84518.7",
										"5": "buttons"
									},
									{
										"0": "1",
										"1": "3",
										"2": "2018",
										"3": "3.2060168267187894",
										"4": "188625.99999999997",
										"5": "skittles"
									},
									{
										"0": "3",
										"1": "3",
										"2": "2018",
										"3": "3.5627118644067792",
										"4": "1261.1999999999998",
										"5": "high-fives"
									},
									{
										"0": "4",
										"1": "3",
										"2": "2018",
										"3": "4.180617283950617",
										"4": "338.62999999999994",
										"5": "castles"
									},
									{
										"0": "1",
										"1": "4",
										"2": "2018",
										"3": "3.1323465488416513",
										"4": "78690.80999999997",
										"5": "skittles"
									},
									{
										"0": "4",
										"1": "4",
										"2": "2018",
										"3": "4.392923076923078",
										"4": "285.5400000000001",
										"5": "castles"
									},
									{
										"0": "3",
										"1": "4",
										"2": "2018",
										"3": "5.563908629441624",
										"4": "1096.09",
										"5": "high-fives"
									},
									{
										"0": "2",
										"1": "4",
										"2": "2018",
										"3": "3.0943009250016633",
										"4": "46498.06",
										"5": "buttons"
									},
									{
										"0": "2",
										"1": "5",
										"2": "2018",
										"3": "2.767414309917893",
										"4": "84937.47999999998",
										"5": "buttons"
									},
									{
										"0": "1",
										"1": "5",
										"2": "2018",
										"3": "3.2631421506629357",
										"4": "229624.0500000001",
										"5": "skittles"
									},
									{
										"0": "3",
										"1": "5",
										"2": "2018",
										"3": "0.45961038961038964",
										"4": "35.39",
										"5": "high-fives"
									},
									{
										"0": "4",
										"1": "5",
										"2": "2018",
										"3": "0.7035897435897436",
										"4": "27.44",
										"5": "castles"
									},
									{
										"0": "2",
										"1": "6",
										"2": "2018",
										"3": "2.768574721269297",
										"4": "51650.53",
										"5": "buttons"
									},
									{
										"0": "3",
										"1": "6",
										"2": "2018",
										"3": "0.8365",
										"4": "33.46",
										"5": "high-fives"
									},
									{
										"0": "4",
										"1": "6",
										"2": "2018",
										"3": "0.365",
										"4": "7.3",
										"5": "castles"
									},
									{
										"0": "1",
										"1": "6",
										"2": "2018",
										"3": "3.2245364858775805",
										"4": "135969.02999999994",
										"5": "skittles"
									},
									{
										"0": "1",
										"1": "7",
										"2": "2018",
										"3": "0.2575",
										"4": "1.03",
										"5": "skittles"
									},
									{
										"0": "2",
										"1": "7",
										"2": "2018",
										"3": "10.88",
										"4": "10.88",
										"5": "buttons"
									},
									{
										"0": "1",
										"1": "8",
										"2": "2018",
										"3": "6.1274999999999995",
										"4": "24.509999999999998",
										"5": "skittles"
									},
									{
										"0": "2",
										"1": "8",
										"2": "2018",
										"3": "11.24",
										"4": "22.48",
										"5": "buttons"
									},
									{
										"0": "2",
										"1": "9",
										"2": "2018",
										"3": "25.81",
										"4": "25.81",
										"5": "buttons"
									},
									{
										"0": "1",
										"1": "9",
										"2": "2018",
										"3": "3.432857142857143",
										"4": "24.03",
										"5": "skittles"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "paymentType",
										"type": "string"
									},
									{
										"key": "1",
										"name": "passengerCount",
										"type": "int"
									},
									{
										"key": "2",
										"name": "puYear",
										"type": "int"
									},
									{
										"key": "3",
										"name": "AvgTripDistance",
										"type": "double"
									},
									{
										"key": "4",
										"name": "SumTripDistance",
										"type": "double"
									},
									{
										"key": "5",
										"name": "paymentMethod",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"1"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/4a539c97-ed16-4e64-990d-eecb5e57061e/resourceGroups/Delta_Lake_Example/providers/Microsoft.Synapse/workspaces/traininglakesynapse103/bigDataPools/sparkyBoiThird",
				"name": "sparkyBoiThird",
				"type": "Spark",
				"endpoint": "https://traininglakesynapse103.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkyBoiThird",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Explore NYC Yellow Taxi Data using Spark"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load Data\n",
					"\n",
					"Read NYC Yellow Taxi data as a Spark DataFrame object to manipulate."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Read NYC yellow cab data from Azure Open Datasets\n",
					"from azureml.opendatasets import NycTlcYellow\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"\n",
					"end_date = parser.parse('2018-05-08 00:00:00')\n",
					"start_date = parser.parse('2018-05-01 00:00:00')\n",
					"\n",
					"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\n",
					"df_nyc_tlc = nyc_tlc.to_spark_dataframe()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## creating a table to join"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"payment_type_data = [(\"1\", \"skittles\"),\r\n",
					"        (\"2\", \"buttons\"),\r\n",
					"        (\"3\", \"high-fives\"),\r\n",
					"        (\"4\", \"castles\" )\r\n",
					"        ]\r\n",
					"columns = [\"paymentType\",\"paymentMethod\"]\r\n",
					"\r\n",
					"payment_df = spark.createDataFrame(payment_type_data, columns)\r\n",
					"    \r\n",
					"payment_df.show()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Assessing the data\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_nyc_tlc.printSchema()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Customize data visualization with Spark and notebooks\n",
					"You can control how charts render by using notebooks. The following code shows a simple example. It uses the popular libraries matplotlib and seaborn. The code renders the same kind of line chart as the SQL queries we ran earlier.\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot\n",
					"import seaborn as sns\n",
					"\n",
					"sns.set(style = \"whitegrid\")\n",
					"pdf_nyc = df_nyc.toPandas()\n",
					"#sns.lineplot(x=\"passengerCount\", y=\"SumTripDistance\" , data = pdf_nyc)\n",
					"sns.lineplot(x=\"passengerCount\", y=\"AvgTripDistance\" , data = pdf_nyc)\n",
					"matplotlib.pyplot.show()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"AvgTripDistance"
							],
							"values": [
								"passengerCount"
							],
							"yLabel": "passengerCount",
							"xLabel": "AvgTripDistance",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"passengerCount\":{\"2.382\":7,\"2.9365876998482907\":0,\"2.955385293728598\":1,\"3.0823106614325835\":6,\"3.1096431007047065\":5,\"3.124120509875713\":3,\"3.132080374155551\":4,\"3.1983281312300624\":2,\"6.23\":9,\"7.831666666666666\":8}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\n",
					"\n",
					"df_nyc = (\n",
					"    df_nyc_tlc\n",
					"    .groupBy([\"passengerCount\", \"paymentType\", \"puYear\"])\n",
					"    .agg(\n",
					"        F.avg('tripDistance').alias('AvgTripDistance'),\n",
					"        F.sum('tripDistance').alias('SumTripDistance')\n",
					"    )\n",
					"    .join(\n",
					"        payment_df,\n",
					"        ['paymentType'],\n",
					"        'left')\n",
					"    .orderBy(\"passengerCount\")\n",
					")\n",
					"display(df_nyc)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Sharing Data Between Spark And Serverless SQL\r\n",
					"You can transform a spark dataframe to Serverless SQL\r\n",
					"\r\n",
					"Difference: Spark infers your schema and SQL does not and makes assumptions about the data e.g. a String char 2000 "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create a table in my serverless SQL database\r\n",
					"\r\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS NycAgg\")\r\n",
					"(\r\n",
					"    df_nyc\r\n",
					"    .write\r\n",
					"    .mode(\"overwrite\")\r\n",
					"    .saveAsTable(\"NycAgg.PassengerCountYear\")\r\n",
					")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## .. or Spark to a dedicated SQL pool\r\n",
					"\r\n",
					"write data from a dataframe to a table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"#Create a temporary view for the new dataset to load from Scala\r\n",
					"df_nyc.createOrReplaceTempView(\"NycAgg\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"val sql_df = spark.sqlContext.sql(\"SELECT * FROM NycAgg\")\r\n",
					"sql_df.write.sqlanalytics(\"SQL_pool_low_performance.dbo.NycAgg\", Constants.INTERNAL)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Clean up resources\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\n",
					"\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				]
			}
		]
	}
}